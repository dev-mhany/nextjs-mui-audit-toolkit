name: Dev-Mhany Audit

on:
  repository_dispatch:
    types: [dev-mhany-audit]
  workflow_dispatch:
    inputs:
      audit_config:
        description: 'Audit configuration (JSON)'
        required: false
        default: '{}'
      user_email:
        description: 'User email for notifications'
        required: false

permissions:
  contents: write
  pull-requests: write
  checks: write

concurrency:
  group: audit-${{ github.ref }}
  cancel-in-progress: true

jobs:
  audit:
    runs-on: ubuntu-latest
    name: Next.js + MUI Audit
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.ref || github.ref }}
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Cache audit dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: audit-${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            audit-${{ runner.os }}-npm-
            
      - name: Install dependencies
        run: |
          npm ci --production=false
          
      - name: Clone audit toolkit
        run: |
          git clone https://github.com/dev-mhany/nextjs-mui-audit-toolkit.git /tmp/audit-toolkit
          
      - name: Install audit toolkit
        run: |
          cd /tmp/audit-toolkit/audit\ script
          npm install
          npm link
          
      - name: Prepare audit config
        run: |
          # Parse audit configuration from payload or inputs
          AUDIT_CONFIG='${{ github.event.client_payload.audit_config || github.event.inputs.audit_config || "{}" }}'
          echo "$AUDIT_CONFIG" > .audit-config.json
          echo "📋 Audit configuration:"
          cat .audit-config.json
          
          # Extract configuration values for use in steps
          echo "static_only=$(echo "$AUDIT_CONFIG" | jq -r '.staticOnly // false')" >> $GITHUB_ENV
          echo "enable_fix=$(echo "$AUDIT_CONFIG" | jq -r '.fix // false')" >> $GITHUB_ENV
          echo "min_score=$(echo "$AUDIT_CONFIG" | jq -r '.minScore // 85')" >> $GITHUB_ENV
          echo "app_path=$(echo "$AUDIT_CONFIG" | jq -r '.appPath // ""')" >> $GITHUB_ENV
          echo "create_pr=$(echo "$AUDIT_CONFIG" | jq -r '.createPR // true')" >> $GITHUB_ENV
          echo "auto_merge=$(echo "$AUDIT_CONFIG" | jq -r '.autoMerge // false')" >> $GITHUB_ENV
          
      - name: Run audit
        id: audit
        run: |
          # Build audit command with dynamic flags
          AUDIT_CMD="nextjs-mui-audit run --output ./audit --strict --ci --format json,markdown,html"
          
          # Add min-score if specified
          if [ "${{ env.min_score }}" != "85" ]; then
            AUDIT_CMD="$AUDIT_CMD --min-score ${{ env.min_score }}"
          else
            AUDIT_CMD="$AUDIT_CMD --min-score 85"
          fi
          
          # Add fix flag if enabled
          if [ "${{ env.enable_fix }}" = "true" ]; then
            AUDIT_CMD="$AUDIT_CMD --fix"
          fi
          
          # Add app path if specified (for monorepos)
          if [ -n "${{ env.app_path }}" ]; then
            AUDIT_CMD="$AUDIT_CMD --path ${{ env.app_path }}"
          fi
          
          # Add runtime flag based on static_only setting
          if [ "${{ env.static_only }}" = "true" ]; then
            AUDIT_CMD="$AUDIT_CMD --no-runtime"
          else
            echo "⚠️ Runtime tests enabled - this will take longer and execute code"
          fi
          
          echo "🔍 Running audit command: $AUDIT_CMD"
          eval $AUDIT_CMD
        continue-on-error: true
        env:
          AUDIT_CONFIG_FILE: .audit-config.json
          
      - name: Create audit branch
        id: branch
        run: |
          BRANCH=chore/audit-$(date +%Y%m%d-%H%M%S)
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          git checkout -b $BRANCH
          git add audit/
          git -c user.name="dev-mhany[bot]" \
              -c user.email="audit@users.noreply.github.com" \
              commit -m "audited by dev-mhany: add audit reports

          🔍 Automated audit results
          - HTML report: audit/report.html  
          - JSON data: audit/report.json
          - Summary: audit/REPORT.md
          - Fixes: audit/FIX_REPORT.md
          
          Generated by dev-mhany audit toolkit"
          git push origin $BRANCH
          
      - name: Create/Update PR
        id: pr
        if: ${{ env.create_pr == 'true' }}
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "🔍 Audit: Next.js + MUI (automated)"
          body: |
            ## 🔍 Automated Audit by dev-mhany
            
            This PR contains automated audit results for your Next.js + Material-UI project.
            
            ### 📊 Reports Generated
            - **HTML Report**: [`audit/report.html`](./audit/report.html) - Interactive detailed report
            - **JSON Data**: [`audit/report.json`](./audit/report.json) - Machine-readable results  
            - **Summary**: [`audit/REPORT.md`](./audit/REPORT.md) - Overall grade and key metrics
            - **Fix Guide**: [`audit/FIX_REPORT.md`](./audit/FIX_REPORT.md) - Recommended fixes
            
            ### ⚙️ Audit Configuration
            - **Mode**: ${{ env.static_only == 'true' && 'Static analysis only' || 'Full audit with runtime tests' }}
            - **Auto-fix**: ${{ env.enable_fix == 'true' && 'Enabled' || 'Disabled' }}
            - **Min Score**: ${{ env.min_score }}
            ${{ env.app_path != '' && format('**App Path**: {0}', env.app_path) || '' }}
            
            ### 🔒 Security Notice
            ${{ env.static_only == 'true' && '- Static analysis only (no code execution)' || '- Runtime tests enabled - code will be executed in sandbox' }}
            - Reports committed to audit branch (not main)
            - Compatible with branch protection rules
            
            ### 🎯 Next Steps
            1. Review the audit reports
            2. Apply recommended fixes
            3. Merge when satisfied with results
            
            ---
            
            **Audit Status**: ${{ steps.audit.outcome == 'success' && '✅ Passed' || '❌ Issues Found' }}
            
            **Triggered by**: ${{ github.event.client_payload.triggered_by || 'Manual' }}
            
            <sub>🤖 Generated by [dev-mhany audit toolkit](https://github.com/dev-mhany/nextjs-mui-audit-toolkit)</sub>
          branch: ${{ steps.branch.outputs.branch }}
          labels: |
            audit
            automated
            dev-mhany
            ${{ env.auto_merge == 'true' && 'audit:auto-merge' || '' }}
          draft: false
          
      - name: Add PR comment with summary
        if: ${{ env.create_pr == 'true' && steps.pr.outputs.pull-request-number }}
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ steps.pr.outputs.pull-request-number }}
          body: |
            ## 📊 Audit Summary
            
            | Metric | Value |
            |--------|-------|
            | Overall Grade | See `audit/REPORT.md` |
            | Status | ${{ steps.audit.outcome == 'success' && '✅ Passed' || '❌ Needs Attention' }} |
            | Reports | [`audit/`](./audit/) directory |
            | Mode | ${{ env.static_only == 'true' && 'Static analysis only' || 'Full audit with runtime tests' }} |
            | Auto-fix | ${{ env.enable_fix == 'true' && 'Enabled' || 'Disabled' }} |
            
            **View detailed results**: [`audit/report.html`](./audit/report.html)
            
            ${{ env.auto_merge == 'true' && '⚠️ **Auto-merge enabled** - This PR will be merged automatically if all checks pass.' || '' }}
            
      - name: Auto-merge PR if enabled
        if: ${{ env.auto_merge == 'true' && steps.audit.outcome == 'success' && steps.pr.outputs.pull-request-number }}
        run: |
          echo "🔄 Auto-merge enabled - merging PR #${{ steps.pr.outputs.pull-request-number }}"
          gh pr merge ${{ steps.pr.outputs.pull-request-number }} --squash --delete-branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create check run summary
        uses: LouisBrunner/checks-action@v2.0.0
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "dev-mhany audit summary"
          conclusion: ${{ steps.audit.outcome == 'success' && 'success' || 'failure' }}
          output: |
            {
              "title": "Next.js + MUI Audit Complete",
              "summary": "${{ env.create_pr == 'true' && format('Audit completed. See PR #{0} for detailed results.', steps.pr.outputs.pull-request-number) || 'Audit completed. Results committed to audit branch.' }}",
              "text": "**Configuration:**\n- Mode: ${{ env.static_only == 'true' && 'Static analysis only' || 'Full audit with runtime tests' }}\n- Auto-fix: ${{ env.enable_fix == 'true' && 'Enabled' || 'Disabled' }}\n- Min score: ${{ env.min_score }}\n${{ env.app_path != '' && format('- App path: {0}', env.app_path) || '' }}\n\n**Reports available in the audit/ directory:**\n- audit/report.html (interactive)\n- audit/report.json (data)\n- audit/REPORT.md (summary)\n- audit/FIX_REPORT.md (fixes)"
            }
            
      - name: Upload audit artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: audit-results-${{ github.run_id }}
          path: audit/
          retention-days: 30
          
      - name: Notify completion via email
        if: always() && (github.event.client_payload.user_email || github.event.inputs.user_email)
        run: |
          echo "📧 Preparing email notification..."
          
          # Prepare notification data
          USER_EMAIL="${{ github.event.client_payload.user_email || github.event.inputs.user_email }}"
          AUDIT_STATUS="${{ steps.audit.outcome }}"
          REPO_URL="https://github.com/${{ github.repository }}"
          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          PR_URL="${{ steps.pr.outputs.pull-request-url }}"
          
          # Create email payload
          cat > email_payload.json << EOF
          {
            "to": "$USER_EMAIL",
            "auditResult": {
              "id": "audit_${{ github.run_id }}",
              "repoUrl": "$REPO_URL",
              "branch": "${{ github.ref_name }}",
              "status": "$AUDIT_STATUS",
              "workflowRunId": "${{ github.run_id }}",
              "prUrl": "$PR_URL",
              "completedAt": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)",
              "score": ${{ env.min_score }},
              "letterGrade": "See REPORT.md",
              "criticalIssues": 0,
              "configuration": {
                "staticOnly": ${{ env.static_only }},
                "autoFix": ${{ env.enable_fix }},
                "minScore": ${{ env.min_score }},
                "appPath": "${{ env.app_path }}",
                "createPR": ${{ env.create_pr }},
                "autoMerge": ${{ env.auto_merge }}
              }
            }
          }
          EOF
          
          echo "📧 Email notification prepared for: $USER_EMAIL"
          echo "📄 Audit Status: $AUDIT_STATUS"
          echo "🔗 PR URL: $PR_URL"
          echo "📊 Workflow: $WORKFLOW_URL"
          
          # In a real implementation, this would call an email API endpoint
          # For now, we'll just log the notification details
          echo "Email notification would be sent with the above details"
          
      - name: Set workflow outputs
        if: always()
        run: |
          echo "audit-status=${{ steps.audit.outcome }}" >> $GITHUB_OUTPUT
          
          # Set PR outputs only if PR was created
          if [ "${{ env.create_pr }}" = "true" ] && [ -n "${{ steps.pr.outputs.pull-request-url }}" ]; then
            echo "pr-url=${{ steps.pr.outputs.pull-request-url }}" >> $GITHUB_OUTPUT
            echo "pr-number=${{ steps.pr.outputs.pull-request-number }}" >> $GITHUB_OUTPUT
          else
            echo "pr-url=" >> $GITHUB_OUTPUT
            echo "pr-number=" >> $GITHUB_OUTPUT
          fi
          
          # Log configuration summary
          echo "📋 Audit completed with configuration:"
          echo "  - Static only: ${{ env.static_only }}"
          echo "  - Auto-fix: ${{ env.enable_fix }}"
          echo "  - Min score: ${{ env.min_score }}"
          echo "  - App path: ${{ env.app_path }}"
          echo "  - Create PR: ${{ env.create_pr }}"
          echo "  - Auto-merge: ${{ env.auto_merge }}"